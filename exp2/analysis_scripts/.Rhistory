knitr::opts_chunk$set(echo = TRUE)
library(pacman)
pacman::p_load(tidyverse,
conflicted,
here,
effsize,
ggrepel,
patchwork,
ggpubr,
boot,
nptest,
boot.pval,
cowplot,
DT
)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("rename", "dplyr")
conflict_prefer("arrange", "dplyr")
conflict_prefer("summarise", "dplyr")
conflict_prefer("lmer", "lmerTest")
conflict_prefer("here", "here")
source(here(
"helper_funs.R"))
sessionInfo()
metrics.full <- readRDS(here("outputs/vis_features_pervideo.Rds"))
metrics.full <- readRDS(here("outputs/visual_statistics/vis_features_pervideo.Rds"))
# remove fam events, and support events (only in exp 1)
metrics <- metrics.full %>%
filter(task != "support")
(
summary_fig <- ggplot(data = metrics,
aes(
x = domain,
y = normalized_value,
label = video,
fill = event
)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
geom_point(position = position_dodge(width = 0.8)) +
ylab("Normalized measure per video") +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange", colour = "red", position = position_dodge(width = 0.8)) +
geom_text(size = 2, check_overlap = TRUE) +
facet_grid(~metric) +
theme_cowplot(15) +
theme(axis.text.x = element_text(
angle = 90,
vjust = 0.5,
hjust = 1
))
)
metrics
ggplot(data = metrics,
aes(
x = domain,
y = normalized_value,
label = video,
fill = event
)) +
geom_boxplot(position = position_dodge(width = 0.8))
metrics
ggplot(data = metrics,
aes(
x = domain,
y = normalized_value,
label = scenario_group,
fill = event
)) +
geom_boxplot(position = position_dodge(width = 0.8))
ggplot(data = metrics,
aes(
x = domain,
y = normalized_value,
label = video,
fill = event
)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
geom_point(position = position_dodge(width = 0.8)) +
ylab("Normalized measure per video") +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange", colour = "red", position = position_dodge(width = 0.8))
ggplot(data = metrics,
aes(
x = domain,
y = normalized_value,
label = video,
fill = event
)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
geom_point(position = position_dodge(width = 0.8)) +
ylab("Normalized measure per video") +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange", colour = "red", position = position_dodge(width = 0.8)) +
geom_text(size = 2, check_overlap = TRUE)
ggplot(data = metrics,
aes(
x = domain,
y = normalized_value,
# label = video,
fill = event
)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
geom_point(position = position_dodge(width = 0.8)) +
ylab("Normalized measure per video") +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange", colour = "red", position = position_dodge(width = 0.8)) +
geom_text(size = 2, check_overlap = TRUE) +
facet_grid(~metric)
(
summary_fig <- ggplot(data = metrics,
aes(
x = domain,
y = normalized_value,
label = video,
fill = event
)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
geom_point(position = position_dodge(width = 0.8)) +
ylab("Normalized measure per video") +
stat_summary(fun.data = "mean_cl_boot", geom = "pointrange", colour = "red", position = position_dodge(width = 0.8)) +
geom_text(size = 2, check_overlap = TRUE) +
facet_grid(~metric) +
theme_cowplot(15) +
theme(axis.text.x = element_text(
angle = 90,
vjust = 0.5,
hjust = 1
))
)
(
summary.subset <-
ggplot(
data = features.percondition,
aes(
x = domain,
y = mean_normvalue_per_cond,
label = condition,
fill = domain
)
) +
geom_boxplot() +
geom_point() +
ylab("Mean normalized value per condition") +
stat_summary(
fun.data = "mean_se",
geom = "pointrange",
colour = "red"
) +
geom_text(size = 2, check_overlap = TRUE) +
theme_cowplot(15) +
facet_wrap( ~ metric) +
theme(axis.text.x = element_text(
angle = 90,
vjust = 0.5,
hjust = 1
))
)
features.percondition <- metrics %>%
group_by(metric, domain, task, event) %>%
summarise(mean_value_per_cond = mean(value),
mean_normvalue_per_cond = mean(normalized_value)) %>%
unite(domain:event,
col = "condition",
sep = "_",
remove = FALSE)
(
summary.subset <-
ggplot(
data = features.percondition,
aes(
x = domain,
y = mean_normvalue_per_cond,
label = condition,
fill = domain
)
) +
geom_boxplot() +
geom_point() +
ylab("Mean normalized value per condition") +
stat_summary(
fun.data = "mean_se",
geom = "pointrange",
colour = "red"
) +
geom_text(size = 2, check_overlap = TRUE) +
theme_cowplot(15) +
facet_wrap( ~ metric) +
theme(axis.text.x = element_text(
angle = 90,
vjust = 0.5,
hjust = 1
))
)
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
pacman::p_load(tidyverse,
data.table,
janitor,
conflicted,
here,
reticulate)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("rename", "dplyr")
conflict_prefer("arrange", "dplyr")
conflict_prefer("summarise", "dplyr")
conflict_prefer("mutate", "dplyr")
conflict_prefer("lmer", "lmerTest")
conflict_prefer("here", "here")
source(here("helper_funs.R"))
sessionInfo()
# read in data, and information about ROIs
factors <-
c("ROI_name", "event", "top_n_voxels", "domain", "event", "extracted_copes_main_condition", "extracted_run_number")
study2.data0 <-
read_csv(here("input_data/ROI_analysis_outputs_Apr06_2023_convertVectors.csv")) %>%
filter(!is.na(extracted_run_number)) %>%
separate(
col = "extracted_copes_main_condition",
into = c("domain", "event") ,
# into = c("domain", "task", "event") ,
sep = "_",
remove = FALSE
) %>%
rename(meanbeta = mean_topVoxels_main_condition_copes,
top_n_voxels = top_voxel_selection_method) %>%
mutate_at(factors, as.factor)
# read in data, and information about ROIs
factors <-
c("ROI_name", "event", "top_n_voxels", "domain", "event", "extracted_copes_main_condition", "extracted_run_number")
study2.data0 <-
read_csv(here("input_data/ROI_analysis_outputs_Apr06_2023_convertVectors.csv")) %>%
filter(!is.na(extracted_run_number)) %>%
separate(
col = "extracted_copes_main_condition",
into = c("domain", "event") ,
# into = c("domain", "task", "event") ,
sep = "_",
remove = FALSE
) %>%
rename(meanbeta = mean_topVoxels_main_condition_copes,
top_n_voxels = top_voxel_selection_method) %>%
mutate_at(factors, as.factor)
region_info <- read.csv(here("input_data/manyregions_info.csv")) %>%
mutate(ROI_name = paste0(ROI_name, "_MNI152Lin2009cAsym_res-02", sep = ""))
subject_info <- read.csv(here("input_data/exp2_study_subjects.csv"))
table(subject_info$gender)
table(subject_info$handed)
summary(subject_info)
study2.data.prelim <- full_join(study2.data0, region_info) %>%
mutate(LR = case_when(str_detect(ROI_name_final, "bilateral") ~ "bilateral",
TRUE ~ str_sub(ROI_name_final,-1,-1)))
study2.data <- full_join(study2.data.prelim, subject_info)
study2.data$event <- relevel(study2.data$event, ref = "fam")
# study2.data$task <- factor(study2.data$task, c("efficiency", "goal", "solidity", "permanence", "agent-solidity", "infer-constraint"))
# check for duplicates
study2.data %>%
get_dupes(vector1_topVoxels_main_condition_copes) %>%
group_by(top_n_voxels, subjectID, ROI_name, extracted_run_number) %>%
summarise(n_observations = n())
study2.data.top100 <- study2.data %>%
filter(top_n_voxels == 100)
study2.data <- read_rds( here("outputs/univariate_data/study2_univariate_data_allregions_alltopN.Rds"))
summary_domain <-
summarySEwithin(
data = study2.data,
measurevar = "meanbeta",
withinvars = c("top_n_voxels", "ROI_name_final", "ROI_category", "old_ROI", "LR", "extracted_run_number", "focal_region", "domain", "event"),
idvar = "subjectID"
)
summary_domain_runs12 <-
summarySEwithin(
data = study2.data %>% filter(extracted_run_number == "run1" | extracted_run_number == "run2"),
measurevar = "meanbeta",
withinvars = c("top_n_voxels", "ROI_name_final", "ROI_category","old_ROI", "LR", "focal_region", "domain", "event"),
idvar = "subjectID"
)
summary_domain_allruns <-
summarySEwithin(
data = study2.data %>% filter(str_length(extracted_run_number) == 4),
measurevar = "meanbeta",
withinvars = c("top_n_voxels", "ROI_name_final", "ROI_category", "old_ROI", "LR", "focal_region", "domain", "event"),
idvar = "subjectID"
)
summary_domain_allruns <-
summarySEwithin(
data = study2.data %>% filter(str_length(extracted_run_number) == 4),
measurevar = "meanbeta",
withinvars = c("top_n_voxels", "ROI_name_final", "ROI_category", "old_ROI", "LR", "focal_region", "domain", "event"),
idvar = "subjectID"
)
summary_domain <-
summarySEwithin(
data = study2.data,
measurevar = "meanbeta",
withinvars = c("top_n_voxels", "ROI_name_final", "ROI_category", "old_ROI", "LR", "extracted_run_number", "focal_region", "domain", "event"),
idvar = "subjectID"
)
summary_domain_runs12 <-
summarySEwithin(
data = study2.data %>% filter(extracted_run_number == "run1" | extracted_run_number == "run2"),
measurevar = "meanbeta",
withinvars = c("top_n_voxels", "ROI_name_final", "ROI_category","old_ROI", "LR", "focal_region", "domain", "event"),
idvar = "subjectID"
)
summary_domain_allruns <-
summarySEwithin(
data = study2.data %>% filter(str_length(extracted_run_number) == 4),
measurevar = "meanbeta",
withinvars = c("top_n_voxels", "ROI_name_final", "ROI_category", "old_ROI", "LR", "focal_region", "domain", "event"),
idvar = "subjectID"
)
study2.subjects <- study2.data %>%
select(subjectID, data_sharing, gender, handed, age, fixation_position) %>%
unique()
range(study2.data$n_voxels_in_brainmasked_parcel)
range(study2.data$n_voxels_subject_specific_brainmasked_parcel)
summary_domain_all_topvoxel_N <-
summarySEwithin(
data = study2.data,
measurevar = "meanbeta",
withinvars = c("top_n_voxels", "ROI_name_final", "ROI_category", "LR", "extracted_run_number", "focal_region", "domain", "event"),
idvar = "subjectID"
)
summary_domain_all_topvoxel_N_runs12 <-
summarySEwithin(
data = study2.data %>% filter(extracted_run_number == "run1" | extracted_run_number == "run2"),
measurevar = "meanbeta",
withinvars = c("top_n_voxels", "ROI_name_final", "ROI_category", "LR", "focal_region", "domain", "event"),
idvar = "subjectID"
)
saveRDS(summary_domain_all_topvoxel_N, here("outputs", "descriptive_summaries", "study2_univariate_summary_domain_all_topvoxel_N.Rds"))
saveRDS(summary_domain_all_topvoxel_N_runs12, here("outputs", "descriptive_summaries", "study2_univariate_summary_domain_all_topvoxel_N.Rds"))
# read in data, and information about ROIs
factors <-
c("ROI_name", "event", "top_n_voxels", "domain", "event", "extracted_copes_main_condition", "extracted_run_number")
study2.VOEextract.data0 <-
read.csv(here("input_data/ROI_analysis_VOErun34extract_outputs_Apr08_2023_convertVectors.csv")) %>%
filter(top_voxel_selection_method == 100,
!is.na(extracted_run_number)) %>%
separate(
col = "extracted_copes_main_condition",
into = c("domain", "event") ,
# into = c("domain", "task", "event") ,
sep = "_",
remove = FALSE
) %>%
rename(meanbeta = mean_topVoxels_main_condition_copes,
top_n_voxels = top_voxel_selection_method) %>%
mutate_at(factors, as.factor)
region_info <- read.csv(here("input_data/manyregions_info.csv")) %>%
mutate(ROI_name = paste0(ROI_name, "_MNI152Lin2009cAsym_res-02", sep = ""))
subject_info <- read.csv(here("input_data/exp2_study_subjects.csv")) %>%
filter(include == 1) %>%
select(subjectID, fixation_position, gender, handed, age)
study2.VOEextract.data.prelim <- full_join(study2.VOEextract.data0, region_info) %>%
mutate(LR = case_when(str_detect(ROI_name_final, "bilateral") ~ "bilateral",
TRUE ~ str_sub(ROI_name_final,-1,-1)))
study2.VOEextract.data <- full_join(study2.VOEextract.data.prelim, subject_info)
study2.VOEextract.data$event <- relevel(study2.VOEextract.data$event, ref = "fam")
# are the number of observations per region per run per subject expected? n_observations should be 9 (3 events x 3 domains)
study2.VOEextract.data %>%
group_by(top_n_voxels, subjectID, ROI_name, extracted_run_number) %>%
summarise(n_observations = n())
# check for duplicates
study2.VOEextract.data %>%
# filter(subjectID == "sub-SAXNES2s028") %>%
get_dupes(vector1_topVoxels_main_condition_copes) %>%
group_by(top_n_voxels, subjectID, ROI_name, extracted_run_number) %>%
summarise(n_duplicates = n())
summary_domain <-
summarySEwithin(
data = study2.VOEextract.data,
measurevar = "meanbeta",
withinvars = c("top_n_voxels", "ROI_name_final", "ROI_category", "LR", "extracted_run_number", "focal_region", "domain", "event"),
idvar = "subjectID"
)
summary_domain_runs12 <-
summarySEwithin(
data = study2.VOEextract.data %>% filter(extracted_run_number == "run1" | extracted_run_number == "run2"),
measurevar = "meanbeta",
withinvars = c("top_n_voxels", "ROI_name_final", "ROI_category", "LR", "focal_region", "domain", "event"),
idvar = "subjectID"
)
# read in data, and information about ROIs
factors <-
c("ROI_name", "event", "top_n_voxels", "domain", "event", "extracted_copes_main_condition", "extracted_run_number")
study2.singlebetas.data0 <-
read.csv(here("input_data/ROI_analysis_singlebetas_outputs_Apr11_2023_convertVectors.csv")) %>%
filter(extracted_copes_main_condition != "check") %>% # filter out attention check betas
mutate(contrast_for_topVoxel_selection = str_remove_all(contrast_for_topVoxel_selection, "contrast-"),
selection_contrast_task_name = str_remove_all(selection_contrast_task_name, "task-"),
ROI_name = str_remove_all(ROI_name, "_MNI152Lin2009cAsym_res-02")) %>%
filter(top_voxel_selection_method == 100,
!is.na(extracted_run_number)) %>%
separate(
col = "extracted_copes_main_condition",
into = c("domain", "task", "scenario", "event") ,
sep = "_",
remove = FALSE
) %>%
rename(meanbeta = mean_topVoxels_main_condition_copes,
top_n_voxels = top_voxel_selection_method) %>%
mutate_at(factors, as.factor) %>%
mutate(scenario = case_when(str_detect(scenario, "exp1") ~ "exp1",
TRUE ~ scenario)) %>%
unite("extracted_copes_main_condition", c("domain", "task", "scenario", "event"), remove = FALSE) %>%
unite("ROI_outputs_video_group", c("domain", "task", "scenario"), remove = FALSE)
study2.singlebetas.data <- read_rds( here("outputs/univariate_data/study2_univariate_data_singlebetas.Rds")) %>%
rename(extracted_copes_main_condition = extracted_copes_main_condition.x)
# are the number of observations per region per run per subject expected? n_observations should be 32.
study2.singlebetas.data %>%
group_by(top_n_voxels, subjectID, extracted_copes_main_condition.x, extracted_run_number) %>%
summarise(n_observations = n())
# are the number of observations per region per run per subject expected? n_observations should be 32.
study2.singlebetas.data %>%
group_by(top_n_voxels, subjectID, extracted_copes_main_condition, extracted_run_number) %>%
summarise(n_observations = n())
# are the number of observations per region per run per subject expected? n_observations should be 32.
study2.singlebetas.data %>%
group_by(top_n_voxels, subjectID, extracted_copes_main_condition, extracted_run_number) %>%
summarise(n_observations = n()) %>%
View()
study2.data <- readRDS(here("outputs/univariate_data/study2_univariate_data_allregions_alltopN.Rds")) %>%
filter(top_n_voxels == "100")
MVPA_vectors_runs12 <-
readRDS(
here(
"outputs",
"multivariate_data",
"study2_multivariate_data_runs12_top100.Rds"
)
)
# are the number of observations per region per subject expected? n_observations should be 9 (2 runs, 3 domains, 3 events) across 4 runs, 3 per run
MVPA_vectors_runs12 %>%
group_by(subj, ROI, extracted_run_number) %>%
summarise(n_observations = n())
table(MVPA_vectors_runs12$event)
table(MVPA_vectors_runs12$length_cope_actual)
study2_distances_runs12 <- readRDS(here("outputs/multivariate_data/study2_MVPA_processed_distances_top100_runs12.Rds"))
str(study2_distances_runs12)
subjects <- unique(study2_distances_runs12$subj)
ROIs <- unique(study2_distances_runs12$ROI_name_final)
study2_distances_runs12_acrossruns <- study2_distances_runs12 %>%
filter(same_run == 1,
distance_metric == "euclidean",
str_detect(pair, "both", negate = TRUE),
str_detect(pair, "fam", negate = TRUE))
noise_ceiling_acrossrun <- data.frame()
euclidean_dist <- function(x, y) sqrt(sum((x - y)^2))
MVPA_noiseceiling_withinrun <- read_rds(here("outputs/multivariate_results/study2_MVPA_noiseceiling_withinrun_perROI.Rds")) %>%
mutate(ceiling = "within_run")
MVPA_noiseceiling_acrossrun <- read_rds(here("outputs/multivariate_results/study2_MVPA_noiseceiling_perROI.Rds")) %>%
mutate(ceiling = "across_run")
MVPA_noiseceiling <- rbind(MVPA_noiseceiling_acrossrun, MVPA_noiseceiling_withinrun) %>%
filter(focal_region == 1,
cor_metric == "euclidean")
ggplot(MVPA_noiseceiling, aes(ceiling, noiseceiling_upper)) +
geom_boxplot() +
geom_point() +
geom_line(aes(group = ROI_name_final, alpha = .4)) +
xlab("Ceiling Computed Within or Across Runs") +
ylab("Upper bound noise ceiling (Euclidean)") +
geom_text_repel(aes(label = ROI_name_final)) +
theme(legend.position = "none")
efficiency_ratings <- py_load_object(here("input_data/behavioral_ratings/agent_behavioral_ratings_scripts/raw_mean_action_efficiency.pik"))
efficiency_ratings_processed <- unlist(efficiency_ratings, recursive = FALSE)
efficiency_ratings <- py_load_object(here("input_data/behavioral_ratings/agent_behavioral_ratings_scripts/raw_mean_action_efficiency.pik"))
pacman::p_load(tidyverse,
data.table,
janitor,
conflicted,
here,
reticulate)
efficiency_ratings <- py_load_object(here("input_data/behavioral_ratings/agent_behavioral_ratings_scripts/raw_mean_action_efficiency.pik"))
reticulate::repl_python()
